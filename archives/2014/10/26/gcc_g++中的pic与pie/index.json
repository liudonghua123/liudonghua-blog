{"summary":"<p>今天想在我的Android 5.0系统上抓包，可是运行tcpdump时提示如下错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: only position independent executables (PIE) are supported.</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在<a href=\"http://blog.csdn.net/hxdanya/article/details/39371759\" target=\"_blank\" rel=\"noopener\">这里</a>提到如下内容</p>\n<blockquote>\n<p>PIE这个安全机制从4.1引入，但是Android L之前的系统版本并不会去检验可执行文件是否基于PIE编译出的。因此不会报错。但是Android L已经开启验证，如果调用的可执行文件不是基于PIE方式编译的，则无法运行。<br>PIE是啥东西呀，我只知道以前编译共享库（动态库）时需要使用PIC的呀，所以特意查了一下文档，记录一下以备以后不时之需</p>\n</blockquote>\n<p>PIE——Position-Independent-Executable<br>用来创建介于共享库和通常可执行代码之间的代码–能像共享库一样可重分配地址的程序<br>有 -fpie, -fPIE, -pie三个参数<br>-fpie与-fPIE 效果一样，用于编译<br>-pie 用于链接<br>但要生成PIE程序，必须两者配合使用，即使用-fpie -pie或-fPIE -pie</p>\n<p>PIC——Position-Independent-Code<br>用来创建共享库时需要用到的参数<br>有-fpic, -fPIC两个参数，都用于编译<br>-fPIC 各平台一般都支持<br>-fpic 在一些特定的平台下会有一些优化</p>\n<p>以下内容选自man手册</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-pie</span><br><span class=\"line\">    Produce a position independent executable on targets that support it.  For predictable</span><br><span class=\"line\">    results, you must also specify the same set of options used for compilation (-fpie,</span><br><span class=\"line\">    -fPIE, or model suboptions) when you specify this linker option.</span><br><span class=\"line\"></span><br><span class=\"line\">-fpic</span><br><span class=\"line\">    Generate position-independent code (PIC) suitable for use in a shared library, if</span><br><span class=\"line\">    supported for the target machine.  Such code accesses all constant addresses through a</span><br><span class=\"line\">    global offset table (GOT).  The dynamic loader resolves the GOT entries when the program</span><br><span class=\"line\">    starts (the dynamic loader is not part of GCC; it is part of the operating system).  If</span><br><span class=\"line\">    the GOT size for the linked executable exceeds a machine-specific maximum size, you get</span><br><span class=\"line\">    an error message from the linker indicating that -fpic does not work; in that case,</span><br><span class=\"line\">    recompile with -fPIC instead.  (These maximums are 8k on the SPARC and 32k on the m68k</span><br><span class=\"line\">    and RS/6000. The 386 has no such limit.)</span><br><span class=\"line\"></span><br><span class=\"line\">    Position-independent code requires special support, and therefore works only on certain</span><br><span class=\"line\">    machines.  For the 386, GCC supports PIC for System V but not for the Sun 386i.  Code</span><br><span class=\"line\">    generated for the IBM RS/6000 is always position-independent.</span><br><span class=\"line\"></span><br><span class=\"line\">    When this flag is set, the macros \"__pic__\" and \"__PIC__\" are defined to 1.</span><br><span class=\"line\"></span><br><span class=\"line\">-fPIC</span><br><span class=\"line\">    If supported for the target machine, emit position-independent code, suitable for dynamic</span><br><span class=\"line\">    linking and avoiding any limit on the size of the global offset table.  This option makes</span><br><span class=\"line\">    a difference on the m68k, PowerPC and SPARC.</span><br><span class=\"line\"></span><br><span class=\"line\">    Position-independent code requires special support, and therefore works only on certain</span><br><span class=\"line\">    machines.</span><br><span class=\"line\"></span><br><span class=\"line\">    When this flag is set, the macros \"__pic__\" and \"__PIC__\" are defined to 2.</span><br><span class=\"line\"></span><br><span class=\"line\">-fpie</span><br><span class=\"line\">-fPIE</span><br><span class=\"line\">    These options are similar to -fpic and -fPIC, but generated position independent code can</span><br><span class=\"line\">    be only linked into executables.  Usually these options are used when -pie GCC option is</span><br><span class=\"line\">    used during linking.</span><br><span class=\"line\"></span><br><span class=\"line\">    -fpie and -fPIE both define the macros \"__pie__\" and \"__PIE__\".  The macros have the</span><br><span class=\"line\">    value 1 for -fpie and 2 for -fPIE.</span><br></pre></td></tr></table></figure>\n<p>PIE与none-PIE的程序可通过file来识别</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">liudonghua@www:~/code$ g++ -o test_non_pie test.cpp</span><br><span class=\"line\">liudonghua@www:~/code$ g++ -o test_pie -fpie -pie test.cpp</span><br><span class=\"line\">liudonghua@www:~/code$ file test_pie</span><br><span class=\"line\">test_pie: ELF 64-bit LSB  shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=d83c8ed281e84b8ed73f545c530dcce0d1eedf39, not stripped</span><br><span class=\"line\">liudonghua@www:~/code$ file test_non_pie</span><br><span class=\"line\">test_non_pie: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=4112d35f407b9f99b335e6e4a1b6a36bc52d679d, not stripped</span><br><span class=\"line\">liudonghua@www:~/code$</span><br></pre></td></tr></table></figure>\n<p>注意上面的shared object与executable的微小区别</p>\n<p>那么之前遇到的那个问题就迎刃而解了<br>修改external/tcpdump下的Android.mk文件，添加如下选项</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOCAL_CFLAGS += -pie -fPIE</span><br><span class=\"line\">LOCAL_LDFLAGS += -pie -fPIE</span><br></pre></td></tr></table></figure>\n<p>参考文档<br><a href=\"http://www.lingcc.com/2010/01/08/10609/\" target=\"_blank\" rel=\"noopener\">GCC中的pie和fpie选项</a><br><a href=\"http://stackoverflow.com/questions/3544035/what-is-the-difference-between-fpic-and-fpic-gcc-parameters\" target=\"_blank\" rel=\"noopener\">what-is-the-difference-between-fpic-and-fpic-gcc-parameters</a><br><a href=\"http://stackoverflow.com/questions/2463150/fpie-position-independent-executable-option-gcc-ld\" target=\"_blank\" rel=\"noopener\">fpie-position-independent-executable-option-gcc-ld</a></p>\n"}