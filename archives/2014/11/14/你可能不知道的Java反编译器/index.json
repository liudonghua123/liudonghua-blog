{"summary":"<p>我最近看到一个使用动画演示排序算法的Android应用<a href=\"https://play.google.com/store/apps/details?id=com.sorts&amp;hl=en\" target=\"_blank\" rel=\"noopener\">sorts</a>，做的挺不错的，对学习算法还是有很大帮助，但美中不足的是缺少冒泡算法，所以想找一下是否有源码，然后再自己添加进去，最终还是没找到，所以就只有反编译看一下能不能添加。</p>\n<a id=\"more\"></a>\n<p>首先想到的是强大的APKTool，这个工具可以反编译res资源、AndroidManifest.xml，Java编译后生成的class转换成的dex可以通过内建的baksmali转换成smali文件，但smali文件只适用于小的修改，所以直接使用dex2jar把dex先转换成class文件，再有jd-gui转换成java源文件。虽然可以转换，但转换之后的Java代码有些和源代码相差太大，不好理解，如以下是部分难看懂的代码（要想看懂也是可以的，不过需要很多其他知识，如可以参考一下<a href=\"http://stackoverflow.com/questions/19855800/difference-between-packed-switch-and-sparse-switch-dalvik-opcode\" target=\"_blank\" rel=\"noopener\">difference-between-packed-switch-and-sparse-switch-dalvik-opcode</a>，<a href=\"http://stackoverflow.com/questions/6347930/dealing-with-labels-in-decompiled-code\" target=\"_blank\" rel=\"noopener\">dealing-with-labels-in-decompiled-code</a>等）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t((Animation) InsertionActivity.<span class=\"keyword\">this</span>.animationList.get(j))</span><br><span class=\"line\">\t\t\t.setStartOffset(<span class=\"number\">600000L</span> + ((Animation) InsertionActivity.<span class=\"keyword\">this</span>.animationList</span><br><span class=\"line\">\t\t\t\t\t.get(j)).getStartOffset());</span><br><span class=\"line\">\tj++;</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t......</span><br></pre></td></tr></table></figure>\n<p>为了生成更容易理解、更接近源代码的代码，寻找新的Java反编译器就非常必要了，这里简单总结一下一些常用的Java反编译器（有点少，很多都老旧过时的，并且这个领域额也不热门）<br><del>1. JAva Decompiler (JAD – No longer maintained)</del><br><del>2. DJ Java Decompiler (UI for JAD)</del></p>\n<ol>\n<li>JD Java Decompiler（JD-GUI的核心）</li>\n<li><a href=\"http://jd.benow.ca/\" target=\"_blank\" rel=\"noopener\">JD-GUI</a></li>\n<li><a href=\"https://bitbucket.org/mstrobel/procyon\" target=\"_blank\" rel=\"noopener\">Procyon</a><br>JAD的只支持近版本，而且非常老旧，只能抛弃<br>JD用的比较多，效果也还好<br>Procyon是我认为目前最好的，并且这个项目还在不断开发维护，值得推荐。</li>\n</ol>\n<p>并且我用基于Procyon的<a href=\"http://www.secureteam.net/Java-Decompiler.aspx\" target=\"_blank\" rel=\"noopener\">SecureTeam</a>反编译出sorts的Java源代码，做了一些修改，直接又可以当作源码编译。</p>\n<p>Procyon反编译后的Java我做的修改有</p>\n<ol>\n<li>删除xxx$xxx内部类（这是冗余的，xxx已经包括这些内部类了）</li>\n<li>修改一些类名，如View$OnClickListener改为View.OnClickListener</li>\n</ol>\n<p>我想这是一些这个反编译器存在的不足，不过相比JD反编译出的质量高了很多，后面有时间可以给Procyon提交一些代码让它能够处理以上两个不足的地方，然后再顺便解决源码里R资源直接是数字的问题，让他替换成R.id.xxx或R.layout.xxx等更有意义的代码</p>\n<p>以下是自己写的使用Python替换反编译代码中的R资源</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__author__ = <span class=\"string\">'Liu.D.H'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> fileinput</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> fnmatch</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parseRresource</span><span class=\"params\">(filePath)</span>:</span></span><br><span class=\"line\">    r_resource = &#123;&#125;</span><br><span class=\"line\">    classbeginpattern = re.compile(<span class=\"string\">r\".*class\\s*(?P&lt;className&gt;[a-zA-Z_][a-zA-Z_0-9]*)\\s*&#123;\"</span>)</span><br><span class=\"line\">    classendpattern = re.compile(<span class=\"string\">r\"\\s*&#125;\\s*\"</span>)</span><br><span class=\"line\">    fieldpattern = re.compile(<span class=\"string\">r\".*int\\s*(?P&lt;fieldName&gt;[_A-Za-z][_0-9A-Za-z]*)\\s*=\\s*(?P&lt;fieldValue&gt;\\d+);\"</span>)</span><br><span class=\"line\">    innerclassname = <span class=\"keyword\">None</span></span><br><span class=\"line\">    innerclassfieldname = <span class=\"keyword\">None</span></span><br><span class=\"line\">    innerclassfieldvalue = <span class=\"keyword\">None</span></span><br><span class=\"line\">    parseinnerclass = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(filePath) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> file:</span><br><span class=\"line\">            classbegin = classbeginpattern.match(line)</span><br><span class=\"line\">            classend = classendpattern.match(line)</span><br><span class=\"line\">            <span class=\"comment\"># Parse begin or end of inner class</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> classbegin:</span><br><span class=\"line\">                parseinnerclass = <span class=\"keyword\">True</span></span><br><span class=\"line\">                innerclassname = classbegin.group(<span class=\"string\">\"className\"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> classend:</span><br><span class=\"line\">                parseinnerclass = <span class=\"keyword\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># Parse field of inner class</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> parseinnerclass:</span><br><span class=\"line\">                innerclassfield = fieldpattern.match(line)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> innerclassfield:</span><br><span class=\"line\">                    innerclassfieldname = innerclassfield.group(<span class=\"string\">\"fieldName\"</span>)</span><br><span class=\"line\">                    innerclassfieldvalue = innerclassfield.group(<span class=\"string\">\"fieldValue\"</span>)</span><br><span class=\"line\">                    r_resource[innerclassfieldvalue] = <span class=\"string\">\"R.%s.%s\"</span> % (innerclassname, innerclassfieldname)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> r_resource</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http://stackoverflow.com/questions/7868554/python-re-subs-replace-function-doesnt-accept-extra-arguments-how-to-avoid</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numberrepl</span><span class=\"params\">(rResource)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">repl</span><span class=\"params\">(matchobj)</span>:</span></span><br><span class=\"line\">        number = matchobj.group(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> number <span class=\"keyword\">in</span> rResource:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> rResource[number]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> number</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">processJavaFile</span><span class=\"params\">(filePath, r_resource)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> fileinput.input(filePath, inplace=<span class=\"number\">1</span>):</span><br><span class=\"line\">        line = re.sub(<span class=\"string\">\"\\d+\"</span>, numberrepl(r_resource), line)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> line,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getFilePaths</span><span class=\"params\">(rootDirectoryPath)</span>:</span></span><br><span class=\"line\">    filePaths = []</span><br><span class=\"line\">    rFilePaths = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recursiveSubFiles</span><span class=\"params\">(directoryPath)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> rFilePath</span><br><span class=\"line\">        <span class=\"keyword\">for</span> root, directories, files <span class=\"keyword\">in</span> os.walk(directoryPath):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> filename == <span class=\"string\">\"R.java\"</span>:</span><br><span class=\"line\">                    rFilePath = os.path.join(root, filename)</span><br><span class=\"line\">                    rFilePaths.append(rFilePath)</span><br><span class=\"line\">                <span class=\"keyword\">elif</span> fnmatch.fnmatch(filename, <span class=\"string\">\"*.java\"</span>):</span><br><span class=\"line\">                    <span class=\"comment\"># Join the two strings in order to form the full filepath.</span></span><br><span class=\"line\">                    filepath = os.path.join(root, filename)</span><br><span class=\"line\">                    filePaths.append(filepath)  <span class=\"comment\"># Add it to the list.</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> dirName <span class=\"keyword\">in</span> directories:</span><br><span class=\"line\">                dirPath = os.path.join(root, dirName)</span><br><span class=\"line\">                recursiveSubFiles(dirName)</span><br><span class=\"line\"></span><br><span class=\"line\">    recursiveSubFiles(rootDirectoryPath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> filePaths, rFilePaths</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">(argv)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># parse command line argument</span></span><br><span class=\"line\">    parser = argparse.ArgumentParser(description=<span class=\"string\">'Replace R resource name with its value.'</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">'-s'</span>, <span class=\"string\">'--srcRootDir'</span>, nargs=<span class=\"string\">\"?\"</span>, const=<span class=\"string\">\".\"</span>, default=<span class=\"string\">\".\"</span>, help=<span class=\"string\">'the root direcotory of src'</span>)</span><br><span class=\"line\">    args = parser.parse_args(argv[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    <span class=\"comment\"># get all java source file paths</span></span><br><span class=\"line\">    javaFilePaths, rFilePaths = getFilePaths(args.srcRootDir)</span><br><span class=\"line\">    <span class=\"comment\"># parse R.java resources</span></span><br><span class=\"line\">    rResources = parseRresource(rFilePaths[<span class=\"number\">0</span>])</span><br><span class=\"line\">    <span class=\"comment\"># process all java source file</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> filePath <span class=\"keyword\">in</span> javaFilePaths:</span><br><span class=\"line\">        processJavaFile(filePath, rResources)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    main(sys.argv)</span><br></pre></td></tr></table></figure>"}