{"summary":"<p>在C/C++中，lvalues(左值)和rvalues(右值)可能是一个一直被忽视的概念</p>\n<a id=\"more\"></a>\n<p>先以一个简单的例子为例进行说明，如一个简单的复数类重载”+”操作符，可能会使用的重载原型是</p>\n<ol>\n<li><span class=\"typ\">Complex<span style=\"color: #666600;\">&amp;</span></span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">::</span><span class=\"kwd\">operator</span><span class=\"pln\"> </span><span class=\"pun\">+(</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Complex&amp;</span><span class=\"pln\"> c</span><span class=\"pun\">);</span></li>\n</ol>\n<p>其不修改”+”两边操作数的实现可能如下所示</p>\n<ol>\n<li><span class=\"typ\">Complex<span style=\"color: #666600;\">&amp;</span></span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">::</span><span class=\"kwd\">operator</span><span class=\"pln\"> </span><span class=\"pun\">+(</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Complex&amp;</span><span class=\"pln\"> c</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></li>\n<li><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">(</span><span class=\"pln\">real </span><span class=\"pun\">+</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">real</span><span class=\"pun\">,</span><span class=\"pln\"> image </span><span class=\"pun\">+</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">image</span><span class=\"pun\">);</span></li>\n<li><span class=\"pun\">}</span></li>\n</ol>\n<p>但编译会有错误提示：”invalid initialization of non-const reference of type ‘Complex&amp;’ from an rvalue of type ‘Complex’”<br>如果不考虑程序的正确性，为了编译通过可以使用如下形式</p>\n<ol>\n<li><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Complex&amp;</span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">::</span><span class=\"kwd\">operator</span><span class=\"pln\"> </span><span class=\"pun\">+(</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Complex&amp;</span><span class=\"pln\"> c</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></li>\n<li><span class=\"kwd\">    return</span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">(</span><span class=\"pln\">real </span><span class=\"pun\">+</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">real</span><span class=\"pun\">,</span><span class=\"pln\"> image </span><span class=\"pun\">+</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">image</span><span class=\"pun\">);</span></li>\n<li><span class=\"pun\">}</span></li>\n</ol>\n<p>其实正确的重载方法如下,程序返回时会调用copy constructor</p>\n<ol>\n<li><span class=\"typ\">Complex</span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">::</span><span class=\"kwd\">operator</span><span class=\"pln\"> </span><span class=\"pun\">+(</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Complex&amp;</span><span class=\"pln\"> c</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></li>\n<li><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">(</span><span class=\"pln\">real </span><span class=\"pun\">+</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">real</span><span class=\"pun\">,</span><span class=\"pln\"> image </span><span class=\"pun\">+</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">image</span><span class=\"pun\">);</span></li>\n<li><span class=\"pun\">}</span></li>\n</ol>\n<p>如果允许修改”+”左边的操作数，也可使用如下</p>\n<ol>\n<li><span class=\"typ\">Complex&amp;</span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">::</span><span class=\"kwd\">operator</span><span class=\"pln\"> </span><span class=\"pun\">+(</span><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">Complex</span><span class=\"pun\">&amp;</span><span class=\"pln\"> c</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></li>\n<li><span class=\"pln\">    real </span><span class=\"pun\">+=</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">real</span><span class=\"pun\">;</span></li>\n<li><span class=\"pln\">    image </span><span class=\"pun\">+=</span><span class=\"pln\"> c</span><span class=\"pun\">.</span><span class=\"pln\">image</span><span class=\"pun\">;</span></li>\n<li><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"kwd\">this</span><span class=\"pun\">;</span></li>\n<li><span class=\"pun\">}</span></li>\n</ol>\n<p>这里要解释为什么”const Complex&amp; Complex::operator +(const Complex&amp; c)”这种函数原型的返回值可以接受临时对象”Complex(real + c.real, image + c.image)”就需要理解lvalues、rvalues</p>\n<ol>\n<li>lvalues是在内存中有实际存储单元的标识符(变量名)</li>\n<li>rvalues真好相反，是没有存储单元的表达式</li>\n<li>lvalues可以单独或组合成表达式作为rvalues</li>\n<li><p>lvalues如果有const修饰则是不可修改的lvalues<br>如</p>\n</li>\n<li><p><span class=\"com\">// —-1—–</span></p>\n</li>\n<li><span class=\"typ\">int</span><span class=\"pln\"> var</span><span class=\"pun\">;</span></li>\n<li><span class=\"pln\">var </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">4</span><span class=\"pun\">;</span></li>\n<li><span class=\"pln\"> </span></li>\n<li><span class=\"com\">// —-2—–</span></li>\n<li><span class=\"lit\">4</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> var</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// ERROR!</span></li>\n<li><span class=\"pun\">(</span><span class=\"pln\">var </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">4</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// ERROR!</span></li>\n<li><span class=\"pln\"> </span></li>\n<li><span class=\"com\">// —-3—–</span></li>\n<li><span class=\"com\">// lvalues as rvalues</span></li>\n<li><span class=\"typ\">int</span><span class=\"pln\"> var2 </span><span class=\"pun\">=</span><span class=\"pln\"> var</span><span class=\"pun\">;</span></li>\n<li><span class=\"pln\">var </span><span class=\"pun\">=</span><span class=\"pln\"> var </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">;</span></li>\n<li><span class=\"pln\"> </span></li>\n<li><span class=\"com\">// —-4—–</span></li>\n<li><span class=\"kwd\">const</span><span class=\"pln\"> </span><span class=\"typ\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// ‘a’ is an lvalue</span></li>\n<li><span class=\"pln\">a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// but it can’t be assigned!</span></li>\n</ol>\n<ol>\n<li>“var = 4”中var是一个占有实际存储单元的变量，是lvalues</li>\n<li>“4”,”(var + 1)”则不是一个实际有存储单元的rvalues</li>\n<li>“var”作为左值可以单独或组合成复合表达式变成右值</li>\n<li>左值”a”有const修饰则”a”是一个不可修改的左值</li>\n</ol>\n<p>左值和右值之间的转换</p>\n<ol>\n<li><p>所有非数组类型、函数类型、不完全类型的左值都可以隐式转换成右值，如</p>\n</li>\n<li><p><span class=\"typ\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// a is an lvalue</span></p>\n</li>\n<li><span class=\"typ\">int</span><span class=\"pln\"> b </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">;</span><span class=\"pln\">     </span><span class=\"com\">// b is an lvalue</span></li>\n<li><span class=\"typ\">int</span><span class=\"pln\"> c </span><span class=\"pun\">=</span><span class=\"pln\"> a </span><span class=\"pun\">+</span><span class=\"pln\"> b</span><span class=\"pun\">;</span><span class=\"pln\">    </span><span class=\"com\">// + needs rvalues, so a and b are converted to rvalues</span></li>\n<li><span class=\"pln\">                          </span><span class=\"com\">// and an rvalue is returned</span></li>\n</ol>\n<ol>\n<li><p>一般右值是不能转换成左值得，只在少数情况下，如一元”*”(dereference)运算符</p>\n</li>\n<li><p><span class=\"typ\">int</span><span class=\"pln\"> arr</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"lit\">1</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">};</span></p>\n</li>\n<li><span class=\"typ\">int</span><span class=\"pun\">*</span><span class=\"pln\"> p </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">&amp;</span><span class=\"pln\">arr</span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">];</span></li>\n<li><span class=\"pun\"><em>(</em></span><span class=\"pln\">p </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\">   </span><span class=\"com\">// OK: p + 1 is an rvalue, but (p + 1) is an lvalue</span></li>\n</ol>\n<ol>\n<li><p>相反”&amp;”运算符则把右值转换为左值</p>\n</li>\n<li><p><span class=\"typ\">int</span><span class=\"pln\"> var </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span></p>\n</li>\n<li><span class=\"typ\">int</span><span class=\"pun\">*</span><span class=\"pln\"> bad_addr </span><span class=\"pun\">=</span><span class=\"pln\"> &amp;</span><span class=\"pun\">(</span><span class=\"pln\">var </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">);</span><span class=\"pln\"> </span><span class=\"com\">// ERROR: lvalue required as unary ‘&amp;’ operand</span></li>\n<li><span class=\"typ\">int</span><span class=\"pun\">*</span><span class=\"pln\"> addr </span><span class=\"pun\">=</span><span class=\"pln\"> <span style=\"color: #666600;\">&amp;</span></span><span class=\"pln\">var</span><span class=\"pun\">;</span><span class=\"pln\">                   </span><span class=\"com\">// OK: var is an lvalue</span></li>\n<li><span class=\"pln\">&amp;var </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">40</span><span class=\"pun\">;</span><span class=\"pln\">                               </span><span class=\"com\">// ERROR: lvalue required as left operand</span></li>\n<li><span class=\"pln\">                                                </span><span class=\"com\">// of assignment</span></li>\n</ol>\n<ol>\n<li><p>“=”可以定义reference types，称作lvalue references，但是Non-const lvalues references不能被右值赋值</p>\n</li>\n<li><p><span class=\"pln\">std</span><span class=\"pun\">::</span><span class=\"pln\">string</span><span class=\"pun\">&amp;</span><span class=\"pln\"> sref </span><span class=\"pun\">=</span><span class=\"pln\"> std</span><span class=\"pun\">::</span><span class=\"pln\">string</span><span class=\"pun\">();</span><span class=\"pln\">  </span><span class=\"com\">// ERROR: invalid initialization of</span></p>\n</li>\n<li><span class=\"pln\">                                                   </span><span class=\"com\">// non-const reference of type</span></li>\n<li><span class=\"pln\">                                                   </span><span class=\"com\">// ‘std::string&amp;’ from an rvalue of</span></li>\n<li><span class=\"pln\">                                                   </span><span class=\"com\">// type ‘std::string’</span></li>\n</ol>\n<p>参考资料</p>\n<ol>\n<li><a href=\"http://eli.thegreenplace.net/2011/12/15/understanding-lvalues-and-rvalues-in-c-and-c\" target=\"_blank\" rel=\"noopener\">Understanding lvalues and rvalues in C and C++</a></li>\n</ol>\n"}