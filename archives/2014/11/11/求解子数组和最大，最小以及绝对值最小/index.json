{"summary":"<p>在一个数组中求解字数组最大是一个经典的问题，详见<a href=\"http://en.wikipedia.org/wiki/Maximum_subarray_problem\" target=\"_blank\" rel=\"noopener\">Maximum subarray problem</a></p>\n<a id=\"more\"></a>\n<p>python代码实现如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_subarray</span><span class=\"params\">(A)</span>:</span></span><br><span class=\"line\">    max_ending_here = max_so_far = A[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> A[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">        max_ending_here = max(x, max_ending_here + x)</span><br><span class=\"line\">        max_so_far = max(max_so_far, max_ending_here)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_so_far</span><br></pre></td></tr></table></figure>\n<p>我封装成面向对象的C++风格算法，如下</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Array.h</span></span><br><span class=\"line\"><span class=\"comment\">//  cppplayground</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//  Created by Liudonghua on 11/11/14.</span></span><br><span class=\"line\"><span class=\"comment\">//  Copyright (c) 2014 Liudonghua. All rights reserved.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> cppplayground_Array_h</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cppplayground_Array_h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sstream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;initializer_list&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Array</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;T&gt; mData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Array();</span><br><span class=\"line\">    <span class=\"comment\">// copy constructor</span></span><br><span class=\"line\">    Array(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp; <span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"comment\">// move constructor</span></span><br><span class=\"line\">    Array(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp;&amp; <span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"comment\">// http://stackoverflow.com/questions/26391745/custom-array-class-constructor-for-initialization-of-list</span></span><br><span class=\"line\">    <span class=\"comment\">// initializer_list</span></span><br><span class=\"line\">    Array(<span class=\"built_in\">initializer_list</span>&lt;T&gt; il);</span><br><span class=\"line\">    <span class=\"keyword\">virtual</span> ~Array();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// operator overload</span></span><br><span class=\"line\">    <span class=\"comment\">// http://stackoverflow.com/questions/4660123/overloading-friend-operator-for-template-class/4661372#4661372</span></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; is, Array&lt;U&gt;&amp; <span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, Array&lt;U&gt; <span class=\"keyword\">const</span>&amp; <span class=\"built_in\">array</span>);</span><br><span class=\"line\">    <span class=\"comment\">// copy assignment operator</span></span><br><span class=\"line\">    Array&lt;T&gt;&amp; <span class=\"keyword\">operator</span>=(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp; rhs);</span><br><span class=\"line\">    <span class=\"comment\">// move assignment operator</span></span><br><span class=\"line\">    Array&lt;T&gt;&amp; <span class=\"keyword\">operator</span>=(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp;&amp; rhs);</span><br><span class=\"line\">    Array&lt;T&gt; <span class=\"keyword\">operator</span>*(T multiple);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">maxSummedSubArrayValue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">minSummedSubArrayValue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"function\">T <span class=\"title\">minAbsoluteSummedSubArrayValue</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt;::Array():mData(<span class=\"built_in\">vector</span>&lt;T&gt;()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt;::Array(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp; <span class=\"built_in\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//this-&gt;mData = vector&lt;T&gt;(array.mData);</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;mData = <span class=\"built_in\">vector</span>&lt;T&gt;(<span class=\"built_in\">array</span>.mData.size());</span><br><span class=\"line\">    copy(<span class=\"built_in\">array</span>.mData.begin(), <span class=\"built_in\">array</span>.mData.end(), <span class=\"keyword\">this</span>-&gt;mData.begin());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt;::Array(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp;&amp; <span class=\"built_in\">array</span>) &#123;</span><br><span class=\"line\">    *<span class=\"keyword\">this</span> = move(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt;::Array(<span class=\"built_in\">initializer_list</span>&lt;T&gt; il) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> initializer_list_size = il.size();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>-&gt;mData = <span class=\"built_in\">vector</span>&lt;T&gt;(initializer_list_size);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> begin = <span class=\"keyword\">this</span>-&gt;mData.begin();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T <span class=\"keyword\">const</span>&amp; i : il) &#123;</span><br><span class=\"line\">        *begin++ = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt;::~Array() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http://stackoverflow.com/questions/236129/split-a-string-in-c</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\">istream&amp; <span class=\"keyword\">operator</span>&gt;&gt;(istream&amp; is, Array&lt;U&gt;&amp; <span class=\"built_in\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> inputString;</span><br><span class=\"line\">    getline(is, inputString);</span><br><span class=\"line\">    U data;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">stringstream</span> <span class=\"title\">ss</span><span class=\"params\">(inputString)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ss &gt;&gt; data) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>.mData.push_back(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> is;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> U&gt;</span><br><span class=\"line\">ostream&amp; <span class=\"keyword\">operator</span>&lt;&lt;(ostream&amp; os, Array&lt;U&gt; <span class=\"keyword\">const</span>&amp; <span class=\"built_in\">array</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> begin = <span class=\"built_in\">array</span>.mData.begin(), end = <span class=\"built_in\">array</span>.mData.end(); begin != end; ++begin) &#123;</span><br><span class=\"line\">        os &lt;&lt; *begin &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    os &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> os;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt;&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>=(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp; rhs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> != &amp;rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;mData = <span class=\"built_in\">vector</span>&lt;T&gt;(rhs.mData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt;&amp; Array&lt;T&gt;::<span class=\"keyword\">operator</span>=(Array&lt;T&gt; <span class=\"keyword\">const</span>&amp;&amp; rhs) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> != &amp;rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;mData = move(rhs.mData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">Array&lt;T&gt; Array&lt;T&gt;::<span class=\"keyword\">operator</span>*(T multiple) &#123;</span><br><span class=\"line\">    Array&lt;T&gt; multipledArray;</span><br><span class=\"line\">    multipledArray.mData = <span class=\"built_in\">vector</span>&lt;T&gt;(<span class=\"keyword\">this</span>-&gt;mData);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> begin = multipledArray.mData.begin(); begin != multipledArray.mData.end(); ++begin) &#123;</span><br><span class=\"line\">        *begin = multiple * (*begin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> multipledArray;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http://en.wikipedia.org/wiki/Maximum_subarray_problem</span></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Array&lt;T&gt;::maxSummedSubArrayValue() &#123;</span><br><span class=\"line\">    T maxEndingHere = mData[<span class=\"number\">0</span>], maxSoFar = mData[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; mData.size(); ++i) &#123;</span><br><span class=\"line\">        T x = mData[i];</span><br><span class=\"line\">        maxEndingHere = max&lt;T&gt;(x, maxEndingHere + x);</span><br><span class=\"line\">        maxSoFar = max&lt;T&gt;(maxSoFar, maxEndingHere);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxSoFar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Array&lt;T&gt;::minSummedSubArrayValue() &#123;</span><br><span class=\"line\">    T minEndingHere = mData[<span class=\"number\">0</span>], minSoFar = mData[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; mData.size(); ++i) &#123;</span><br><span class=\"line\">        T x = mData[i];</span><br><span class=\"line\">        minEndingHere = min&lt;T&gt;(x, minEndingHere + x);</span><br><span class=\"line\">        minSoFar = min&lt;T&gt;(minSoFar, minEndingHere);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minSoFar;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T Array&lt;T&gt;::minAbsoluteSummedSubArrayValue() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// generate incremental array</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;T&gt; incrementalData = <span class=\"built_in\">vector</span>&lt;T&gt;();</span><br><span class=\"line\">    T summedTmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; mData.size(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">            summedTmp += mData[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        incrementalData.push_back(summedTmp);</span><br><span class=\"line\">        summedTmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// sort the incremental array</span></span><br><span class=\"line\">    sort(incrementalData.begin(), incrementalData.end());</span><br><span class=\"line\">    <span class=\"comment\">// calculate minimum diff</span></span><br><span class=\"line\">    T minAbsoluteDiff = incrementalData[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> begin = incrementalData.begin() + <span class=\"number\">1</span>, end = incrementalData.end(); begin != end; ++begin) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">abs</span>(*begin - *(begin <span class=\"number\">-1</span>)) &lt; <span class=\"built_in\">abs</span>(minAbsoluteDiff)) &#123;</span><br><span class=\"line\">            minAbsoluteDiff = *begin - *(begin <span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minAbsoluteDiff;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p><del>不过求最小绝对值还有问题，待更新！！！</del><br>最小绝对值已解决</p>\n<p>注：此类包含了一些我实验C++11、14特性的东西，可能不完善或存在一定问题（待更新）</p>\n"}